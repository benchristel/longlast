#!/bin/bash

# This script does a "system test" of the build process and package.json
# configuration for each package. It verifies that each package can be built,
# installed in a client project, imported, and used. It relies on files in the
# `package-tests` directory of each package.

# Exit immediately on any failure.
set -euo pipefail

# Print a message if this script exits nonzero, to make sure the failure is
# human-visible.
handle_exit() {
    rv=$?
    if ! [ "$rv" -eq 0 ]; then
        echo "Tests failed."
    fi
    exit $rv
}
trap handle_exit EXIT

HERE="$(dirname "$0")"

# Create two clones of the current working tree. We'll use the first one to
# build the packages. The second one will play the role of "client," and we'll
# install the built packages into it as dependencies. Using a worktree clone as
# a client is convenient (if kludgey) -- really, all we need is a Node.js
# repository with TypeScript.
BUILD="$($HERE/clone_worktree 2>/dev/null)"
CLIENT="$($HERE/clone_worktree 2>/dev/null)"

# Build the packages and pack them into .tgz files.
pushd "$BUILD" >/dev/null
    make deps >/dev/null
    make build >/dev/null
    pnpm pack --recursive >/dev/null
popd >/dev/null

pushd "$CLIENT" >/dev/null
    # Get rid of @longlast source code and pnpm-workspace.yaml. Our client
    # doesn't need to be a monorepo.
    rm -rf pnpm-workspace.yaml pkg

    make deps >/dev/null

    # Install the @longlast packages we built earlier.
    pnpm add "$BUILD"/longlast-*.tgz >/dev/null

    # Copy the package tests we're going to run into the client repo.
    pushd "$BUILD" >/dev/null
        ls -d pkg/*/package-tests | \
            xargs -I{} cp -r --parents {} "$CLIENT"
    popd >/dev/null

    # Print the names of the test files. Otherwise, it's hard to be sure if any
    # tests are running!
    echo
    echo "Package tests:"
    find pkg -type f

    # The package tests contain self-imports like "#@longlast/symbols". During
    # development, these imports are resolved to the packages' index.ts files
    # by an `imports` field in package.json. When running the package tests,
    # though, we can use the actual package name, so we remove the '#' here.
    # See: https://nodejs.org/docs/v22.18.0/api/packages.html#imports
    find pkg -type f | xargs sed -ie 's/from "#@longlast/from "@longlast/'

    # Actually run the tests.
    pnpm tsc && dev/scripts/run-unit-tests.ts
popd >/dev/null
